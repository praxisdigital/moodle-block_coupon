{"version":3,"file":"rearrange-area.min.js","sources":["../../src/templates/rearrange-area.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module used when rearranging a custom certificate.\n *\n * @module     block_coupon/rearrange-area\n * @author     R.J. van Dongen\n * @copyright  2023 R.J. van Dongen\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as jqui from 'jqueryui'; // eslint-disable-line no-unused-vars\nimport ModalForm from 'core_form/modalform';\nimport * as Service from 'block_coupon/templates/service';\n\nclass RearrangeArea {\n    /**\n     * RearrangeArea class.\n     *\n     * @param {String} selector The rearrange PDF selector\n     */\n    constructor(selector) {\n        this._node = $(selector);\n        this._setEvents();\n    }\n\n    _node = null;\n\n    COUPON_REF_POINT_TOPLEFT = 0;\n    COUPON_REF_POINT_TOPCENTER = 1;\n    COUPON_REF_POINT_TOPRIGHT = 2;\n    PIXELSINMM = 3.779527559055;\n\n    _getElementHTML(elementid) {\n        // Get the variables we need.\n        const templateid = this._node.attr('data-templateid');\n        // Call/return the web service to get the updated element.\n        return Service.getElementHTML(templateid, elementid);\n    }\n\n    _saveElement(elementid) {\n        // Get the variables we need.\n        const templateid = this._node.attr('data-templateid');\n        const inputs = $('#editelementform').serializeArray();\n        // Call the web service to save the element.\n        return Service.saveElement(templateid, elementid, inputs);\n    }\n\n    _setEvents() {\n        this._node.on('click', '.element', this._editElement.bind(this));\n    }\n\n    async _editElement(event) {\n        var elementid = event.currentTarget.dataset.id;\n\n        const modalForm = new ModalForm({\n            // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n            formClass: \"block_coupon\\\\template\\\\edit_element_dform\",\n            // Add as many arguments as you need, they will be passed to the form:\n            args: {id: elementid},\n            // Pass any configuration settings to the modal dialogue, for example, the title:\n            modalConfig: {title: 'walla'},\n            // DOM element that should get the focus after the modal dialogue is closed:\n            //returnFocus: element,\n        });\n        // Listen to events if you want to execute something on form submit.\n        // Event detail will contain everything the process() function returned:\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, this._modalAfterSave.bind(this));\n        // Show the form.\n        modalForm.show();\n        // We may have dragged the element changing it's position.\n        // Ensure the form has the current up-to-date location.\n        //this._setPositionInForm(elementid);\n    }\n\n    _modalAfterSave(data) {\n        let element = data.detail;\n        this._getElementHTML(element.id).done(function (html) {\n            var elementNode = this._node.find('#element-' + element.id);\n            var refpoint = parseInt(element.refpoint);\n            var refpointClass = '';\n            if (refpoint == this.COUPON_REF_POINT_TOPLEFT) {\n                refpointClass = 'refpoint-left';\n            } else if (refpoint == this.COUPON_REF_POINT_TOPCENTER) {\n                refpointClass = 'refpoint-center';\n            } else if (refpoint == this.COUPON_REF_POINT_TOPRIGHT) {\n                refpointClass = 'refpoint-right';\n            }\n            elementNode.empty().append(html);\n            // Update the ref point.\n            elementNode.removeClass();\n            elementNode.addClass('element ' + refpointClass);\n            elementNode.data('refpoint', refpoint);\n            // Move the element.\n            var posx = element.posx;\n            var posy = element.posy;\n            this._setPosition(element.id, refpoint, posx, posy);\n        }.bind(this));\n    }\n\n    _setPosition(elementid, refpoint, posx, posy) {\n        var element = $('#element-' + elementid);\n        var pdf = $('#pdf');\n\n        posx = pdf.offset().left + posx * this.PIXELSINMM;\n        posy = pdf.offset().top + posy * this.PIXELSINMM;\n        var nodewidth = parseFloat(element.width());\n        var maxwidth = element.width() * this.PIXELSINMM;\n\n        if (maxwidth && (nodewidth > maxwidth)) {\n            nodewidth = maxwidth;\n        }\n\n        switch (refpoint) {\n            case this.COUPON_REF_POINT_TOPCENTER:\n                posx -= nodewidth / 2;\n                break;\n            case this.COUPON_REF_POINT_TOPRIGHT:\n                posx = posx - nodewidth + 2;\n                break;\n        }\n\n        element.offset({left: posx, top: posy});\n    }\n\n    //_setPositionInForm(elementid) {\n    //    var posxelement = $('#editelementform #id_posx');\n    //    var posyelement = $('#editelementform #id_posy');\n    //\n    //    if (posxelement.length && posyelement.length) {\n    //        var element = $('#element-' + elementid);\n    //        var posx = element.offset().left - $('#pdf').offset().left;\n    //        var posy = element.offset().top - $('#pdf').offset().top;\n    //        var refpoint = parseInt(element.data('refpoint'));\n    //        var nodewidth = parseFloat(element.width());\n    //\n    //        switch (refpoint) {\n    //            case this.COUPON_REF_POINT_TOPCENTER:\n    //                posx += nodewidth / 2;\n    //                break;\n    //            case this.COUPON_REF_POINT_TOPRIGHT:\n    //                posx += nodewidth;\n    //                break;\n    //        }\n    //\n    //        posx = Math.round(parseFloat(posx / this.PIXELSINMM));\n    //        posy = Math.round(parseFloat(posy / this.PIXELSINMM));\n    //\n    //        posxelement.val(posx);\n    //        posyelement.val(posy);\n    //    }\n    //}\n}\n\nclass Rearrange {\n    constructor(templateid, page, elements) {\n        this.templateid = templateid;\n        this.page = page;\n        this.elements = elements;\n\n        // Set the PDF dimensions.\n        this.setPdfDimensions();\n\n        // Set the boundaries.\n        this.setBoundaries();\n        this.setpositions();\n        this.createevents();\n\n        window.addEventListener(\"resize\", this.checkWindownResize.bind(this));\n    }\n\n    /**\n     * The template id.\n     */\n    templateid = 0;\n\n    /**\n     * The page we are displaying.\n     */\n    page = [];\n\n    /**\n     * The custom certificate elements to display.\n     */\n    elements = [];\n\n    /**\n     * Store the X coordinates of the top left of the pdf div.\n     */\n    pdfx = 0;\n\n    /**\n     * Store the Y coordinates of the top left of the pdf div.\n     */\n    pdfy = 0;\n\n    /**\n     * Store the width of the pdf div.\n     */\n    pdfwidth = 0;\n\n    /**\n     * Store the height of the pdf div.\n     */\n    pdfheight = 0;\n\n    /**\n     * Store the location of the element before we move.\n     */\n    elementxy = 0;\n\n    /**\n     * Store the left boundary of the pdf div.\n     */\n    pdfleftboundary = 0;\n\n    /**\n     * Store the right boundary of the pdf div.\n     */\n    pdfrightboundary = 0;\n\n    /**\n     * The number of pixels in a mm.\n     */\n    pixelsinmm = 3.779527559055; // 3.779528.\n\n    /**\n     * Sets the current position of the elements.\n     */\n    setpositions() {\n        // Go through the elements and set their positions.\n        for (var key in this.elements) {\n            var element = this.elements[key];\n            var el = document.querySelector('#element-' + element.id);\n            if (el === undefined || el === null) {\n                continue;\n            }\n            var posx = this.pdfx + element.posx * this.pixelsinmm;\n            var posy = this.pdfy + element.posy * this.pixelsinmm;\n            var cr = el.getBoundingClientRect();\n            var nodewidth = cr.width;\n            var maxwidth = element.width * this.pixelsinmm;\n\n            if (maxwidth && (nodewidth > maxwidth)) {\n                nodewidth = maxwidth;\n            }\n\n            switch (element.refpoint) {\n                case '1': // Top-center.\n                    posx -= nodewidth / 2;\n                    break;\n                case '2': // Top-right.\n                    posx = posx - nodewidth + 2;\n                    break;\n            }\n\n            $('#element-' + element.id).offset({left: posx, top: posy});\n        }\n    }\n\n    /**\n     * Sets the PDF dimensions.\n     */\n    setPdfDimensions() {\n        const el = document.querySelector('#pdf');\n        const cr = el.getBoundingClientRect();\n        const offset = $(el).offset();\n        this.pdfx = offset.left;\n        this.pdfy = offset.top;\n        this.pdfwidth = parseFloat(cr.width);\n        this.pdfheight = parseFloat(cr.height);\n    }\n\n    /**\n     * Sets the boundaries.\n     */\n    setBoundaries() {\n        this.pdfleftboundary = this.pdfx;\n        if (this.page.leftmargin) {\n            this.pdfleftboundary += parseInt(this.page.leftmargin * this.pixelsinmm, 10);\n        }\n\n        this.pdfrightboundary = this.pdfx + this.pdfwidth;\n        if (this.page.rightmargin) {\n            this.pdfrightboundary -= parseInt(this.page.rightmargin * this.pixelsinmm, 10);\n        }\n    }\n\n    /**\n     * Check browser resize and reset position.\n     */\n    checkWindownResize() {\n        this.setPdfDimensions();\n        this.setBoundaries();\n        this.setpositions();\n    }\n\n    /**\n     * Creates the JS events for changing element positions.\n     */\n    createevents() {\n        // For now we won't do realtime updates (service calls).\n        const instantupdate = true;\n        // Trigger a save event when save button is pushed.\n        $('.savepositionsbtn [type=submit]').on('click', function(e) {\n            e.preventDefault();\n            this.savepositions(e).then(function() {\n                var formnode = e.currentTarget.closest('form');\n                var baseurl = formnode.getAttribute('action');\n                var pageinput = formnode.querySelector('[name=pid]');\n                if (pageinput) {\n                    var pageid = pageinput.value;\n                    window.location = baseurl + '?pid=' + pageid;\n                } else {\n                    var templateid = formnode.querySelector('[name=tid]').value;\n                    window.location = baseurl + '?tid=' + templateid;\n                }\n            });\n        }.bind(this));\n\n        // Trigger a save event when apply button is pushed.\n        $('.applypositionsbtn [type=submit]').on('click', function(e) {\n            e.preventDefault();\n            this.savepositions(e);\n        }.bind(this));\n\n        // Drag-drop.\n        var selector = '#pdf .element';\n        var pixelsinmm = this.pixelsinmm;\n\n        var target = $(selector);\n        target.draggable({\n                    // Snap to elements only if Shift is not held.\n                    //snap: e.shiftKey ? false : '.snapdraggable',\n                    snap: false,\n                    snapMode: 'inner',\n                    snapTolerance: 10,\n                    // Set containment so it can't be moved far away from the page outlines.\n//                    containment: [\n//                        page.offset().left - el.width(),\n//                        page.offset().top - el.height(),\n//                        page.offset().left + page.width(),\n//                        page.offset().top + page.height()\n//                    ],\n                    containment: $('#pdf')\n                });\n        target.on('dragstart', function(e) {\n                $(e.currentTarget).addClass('isdragged');\n            })\n            .on('dragstop', function(e) {\n                var el = $(e.currentTarget),\n                    page = el.closest('#pdf'),\n                    refpoint = parseInt($(this).data('refpoint')),\n                    offset = refpoint ? parseInt($(this).width()) * refpoint / 2 : 0,\n                    left = (el.offset().left - page.offset().left + offset) / pixelsinmm,\n                    top = (el.offset().top - page.offset().top) / pixelsinmm;\n                setTimeout(function() {\n                    el.removeClass('isdragged');\n                }, 100);\n\n                if (instantupdate) {\n                    Service.updateElementPositions(\n                        page.data('templateid'),\n                        [{id: el.data('id'), posx: Math.round(parseFloat(left)), posy: Math.round(parseFloat(top))}]\n                    );\n                }\n            });\n    }\n\n    /**\n     * Returns true if any part of the element is placed outside of the PDF div, false otherwise.\n     *\n     * @param {Element} el\n     * @returns {boolean}\n     */\n    isoutofbounds(el) {\n        // Get the width and height of the node.\n        var cr = el.getBoundingClientRect();\n        var offset = $(el).offset();\n        var nodewidth = parseFloat(cr.width);\n        var nodeheight = parseFloat(cr.height);\n\n        // Store the positions of each edge of the node.\n        var left = offset.left;\n        var right = left + nodewidth;\n        var top = offset.top;\n        var bottom = top + nodeheight;\n\n        const pdf = document.querySelector('#pdf');\n        const poffset = $(pdf).offset();\n        this.pdfx = poffset.left;\n        this.pdfy = poffset.top;\n\n        // Check if it is out of bounds horizontally.\n        if ((left < this.pdfleftboundary) || (right > this.pdfrightboundary)) {\n            return true;\n        }\n\n        // Check if it is out of bounds vertically.\n        if ((top < this.pdfy) || (bottom > (this.pdfy + this.pdfheight))) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Perform an AJAX call and save the positions of the elements.\n     */\n    savepositions() {\n        // The parameters to send the AJAX call.\n        var values = [];\n\n        const offset = $('#pdf').offset();\n        this.pdfx = offset.left;\n        this.pdfy = offset.top;\n\n        // Go through the elements and save their positions.\n        for (var key in this.elements) {\n            var element = this.elements[key];\n            var el = $('#element-' + element.id);\n            if (el.length === 0) {\n                continue;\n            }\n            var eloffset = el.offset();\n\n            // Get the current X and Y positions and refpoint for this element.\n            var posx = eloffset.left - this.pdfx;\n            var posy = eloffset.top - this.pdfy;\n            var refpoint = el.data('refpoint');\n\n            var nodewidth = parseFloat(el.width());\n\n            switch (refpoint) {\n                case '1': // Top-center.\n                    posx += nodewidth / 2;\n                    break;\n                case '2': // Top-right.\n                    posx += nodewidth;\n                    break;\n            }\n\n            // Set the parameters to pass to the AJAX request.\n            values.push({\n                id: element.id,\n                posx: Math.round(parseFloat(posx / this.pixelsinmm)),\n                posy: Math.round(parseFloat(posy / this.pixelsinmm))\n            });\n        }\n\n        Service.updateElementPositions(this.templateid, values);\n    }\n\n}\n\nexport default {\n    init: function(selector, templateid, page, elements) {\n        new Rearrange(templateid, page, elements);\n        new RearrangeArea(selector);\n    }\n};\n"],"names":["RearrangeArea","constructor","selector","_node","_setEvents","_getElementHTML","elementid","templateid","this","attr","Service","getElementHTML","_saveElement","inputs","serializeArray","saveElement","on","_editElement","bind","event","currentTarget","dataset","id","modalForm","ModalForm","formClass","args","modalConfig","title","addEventListener","events","FORM_SUBMITTED","_modalAfterSave","show","data","element","detail","done","html","elementNode","find","refpoint","parseInt","refpointClass","COUPON_REF_POINT_TOPLEFT","COUPON_REF_POINT_TOPCENTER","COUPON_REF_POINT_TOPRIGHT","empty","append","removeClass","addClass","posx","posy","_setPosition","pdf","offset","left","PIXELSINMM","top","nodewidth","parseFloat","width","maxwidth","Rearrange","page","elements","setPdfDimensions","setBoundaries","setpositions","createevents","window","checkWindownResize","key","el","document","querySelector","pdfx","pixelsinmm","pdfy","getBoundingClientRect","cr","pdfwidth","pdfheight","height","pdfleftboundary","leftmargin","pdfrightboundary","rightmargin","e","preventDefault","savepositions","then","formnode","closest","baseurl","getAttribute","pageinput","pageid","value","location","target","draggable","snap","snapMode","snapTolerance","containment","setTimeout","updateElementPositions","Math","round","isoutofbounds","nodeheight","right","bottom","poffset","values","length","eloffset","push","init"],"mappings":"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"}